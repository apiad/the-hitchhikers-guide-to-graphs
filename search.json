[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The Hitchhiker’s Guide to Graphs",
    "section": "",
    "text": "Preface\nWhat do the World Wide Web, your brain, the corpus of scientific knowledge accumulated by all of humanity, the entire list of people you’ve ever met, and the city you live in have in common?\nThese are all very different types of things, from physical, to virtual, to social in nature, but they share a very important trait. They are all networks that establish relationships between some entities.\nThe World Wide Web is a network of interconnected computational resources, data, software, and hardware infrastructure. Your brain is a network of interconnected neurons. The accumulated human knowledge is also a network of interconnected ideas, as all discoveries depend upon prior knowledge, and unlock new discoveries. The city you live in is also an interconnected network of roads and buildings. And the people you know is also network, as many of them know each other, or know someone that knows someone you know.\nAs distinct as these things are, they all share common properties, by virtue of their networked nature. For example, you can think of how “close” two entities in this network are. The meaning of “distance” will be different if you’re considering physical networks (like roads) versus information networks (like published papers with citations to other papers) versus social networks (like your Facebook friends), but in all cases there is some sense in which some entities are “closer” together than others.\nWhat if we could study this abstract notion of networks, and understand their fundamental properties all at once?\nWelcome to graph theory.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#welcome-to-graph-theory",
    "href": "index.html#welcome-to-graph-theory",
    "title": "The Hitchhiker’s Guide to Graphs",
    "section": "Welcome to Graph Theory!",
    "text": "Welcome to Graph Theory!\nTo study these seemingly disparate objects in the deepest possible way, we need an abstract concept that captures the fundamental notion of things connected together. In mathematics and computer science, they are called graphs. Graphs lie at the intersection of mathematics and computer science, and their study is one of the most fascinating branches of math, science, and human knowledge in general.\nThis book is a journey through the theory and applications of graphs, synthesizing the practical and the mathematical points of view. In each chapter, we will look at one specific problem and see how it can be translated into the language of graphs. Then we will design a computational strategy – an algorithm – to solve that problem, or at least to attempt an approximation – because some problems are too hard to solve them completely. In doing so, we will also look at the underlying theory that makes our solution work.\nIn the next few hundred pages, we will teach you almost everything we know about graphs, including their most intriguing mathematical properties, but also their most practical uses to solve real-world scientific, engineering, and social problems.\nThus, when you’ve finished reading this book, you will have a solid understanding and familiarity of graphs, similar to the level expected from a Computer Science graduate in most curricula out there. (And perhaps deeper in some niche topics that are usually not taught in a CS major.)",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#what-this-book-is-and-what-is-not",
    "href": "index.html#what-this-book-is-and-what-is-not",
    "title": "The Hitchhiker’s Guide to Graphs",
    "section": "What this book is (and what is not)",
    "text": "What this book is (and what is not)\nThis book is not a textbook for a computer science course. There are plenty of wonderful books you can use if you’re learning (or teaching) about graphs at college. The most essential of these books is Introduction to Algorithms1, which I strongly recommend you check out if you want a more traditional – and complete – introduction to, well, algorithms in general and graphs in particular. It is the best selling book in the history of computer science.\nThis book will cover both some of the simplest and some of the most advanced algorithms and concepts in graph theory, so there is no single one-semester course where all this content could be taught. Depending on your background and interests, this book will serve you in different ways.\nIf you are a Computer Science student, think of this book as a complement to all you will see in college. As you learn about graphs in different subjects, you can come to this book and find algorithms, theorems, and proofs suitable to the level of depth you’re exploring.\nIf you are a CS professor, this book can give you some cool ideas to introduce specific graph theorems and algorithms, along with clean and simple reference implementations. The explanations are also more intuitive than what you can find in more traditional textbooks. The book also features follow-up questions and problems that you can mix-and-match with your own to enrich your classes or exams.\nIf you are a software developer, you can use this book to complement your knowledge about graphs, or fill any gaps you may have from your background studies. You can also use it as a quick reference to many of the most used graph algorithms, and as an inspiration to introduce graph theory into your current projects, perhaps improving some of your work.\nIf you are a casual coder, this book will give you plenty of cool problems to play with and ideas to build some cool projects on your own. It may even give you the inspiration to go deeper into other computer science fields such as AI and optimization.\nAnd if you are none of the above, you can still enjoy this book. Some of the most beautiful ideas in math emerge naturally from graph theory. In any case, as I’ll try to convince you in this book, graphs are everywhere. Knowing more about them can only help you see the world around you with a new pair of glasses, and that’s always a good thing.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#prerequisites",
    "href": "index.html#prerequisites",
    "title": "The Hitchhiker’s Guide to Graphs",
    "section": "Prerequisites",
    "text": "Prerequisites\nThis book assumes some basic knowledge of programming. If you have some experience with the Python programming language, you’ll find it easier to understand the code examples. However, even if you’ve never seen Python before, a minimal familiarity with any programming language will probably be more than enough, since Python is super intuitive – at least its small subset that we’ll use throughout this book. If you’re new to Python or need a refresher, check the Appendix B — A Primer on Python for a quick intro to the basic features of the language that we’ll need in this book.\nIf you have never, ever seen a programming language before, then the coding part of this book will be harder for you. However, you can still enjoy the intuitive and visual explanations and the mathematical proofs, and skip all the code. We will always present an informal explanation of any algorithms that we study. And if getting the most out of this book is the nudge you need to learn a little bit of coding, even better!\nRegarding math, you should be at least comfortable with high-school level, but no college-level math is necessary. Specially, no advanced calculus or algebra appears anywhere in this book. The majority of the proofs use only basic logic, and we’ll introduce any mathematical tool we need – such as strong induction or reductio ad absurdum – in the Appendix A — A Primer on Logic and Discrete Math. That being said, some minimal previous exposure to discrete math won’t hurt you.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#how-to-read-this-book",
    "href": "index.html#how-to-read-this-book",
    "title": "The Hitchhiker’s Guide to Graphs",
    "section": "How to read this book",
    "text": "How to read this book\nThis book is divided into several parts that are more or less independent. Except for Chapter 1  Introduction, all other chapters can be read roughly in any order, although the first few chapters introduce the most important algorithms. In some rare cases a later chapter may reference a previous result or algorithm, but in those cases you’ll find an explicit link to any required content. Thus, unless you’ve already familiar with the basic notations and concepts in graph theory, I recommend you read Chapter 1  Introduction first. Afterwards, you’re free to hop around and take any chapter that suits your interest.\nEach part deals with solving problems of a similar nature, and is divided into chapters that grow in complexity. That means, say, the last chapter of Part 2 may be more advanced than the first chapter of Part 4.\nEach chapter is dedicated to solving one specific problem, introducing ideas and algorithms that emerge from our journey towards the solution. In each chapter, we will\n\nunderstand and mathematically formulate the problem,\nbuild intuitions to channel our ideas towards the solution,\nand discover the solution in the form of a theorem or an algorithm. If it’s an algorithm, we’ll build a reference implementation in Python as well.\n\nIntermixed between all of this, we’ll drop some theoretical sections that delve into the underlying math and provide some formal proofs. These sections will be clearly marked and are absolutely optional, so you are free to skip them, at least on a first read.\nIn summary, you can read this book top-to-bottom, or you can skim and jump around as much as you want.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#complementary-source-code",
    "href": "index.html#complementary-source-code",
    "title": "The Hitchhiker’s Guide to Graphs",
    "section": "Complementary source code",
    "text": "Complementary source code\nThis book comes with by a simple Python library called hitchhikers-graphs that contains all the code we’ll write and use throughout the book. You will find a short reference for this library in the Appendix C — The hitchhiker-graphs Python Package.\nThe library itself is open-source and can serve as a starting point for other projects, but it is not designed to be a production-ready solution for solving graph problems. It is merely an educational device, designed to help you truly understand graph theory. For this reason, all implementations are purposefully oversimplified and more care is given to clarity and simplicity than performance.\nThat being said, you’re free to download, modify, and use it as you see fit.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#a-word-on-notation",
    "href": "index.html#a-word-on-notation",
    "title": "The Hitchhiker’s Guide to Graphs",
    "section": "A word on notation",
    "text": "A word on notation\nThis book follows the standard mathematical notation for graphs that you can find anywhere, and we will learn that notation in due time, incorporating new concepts as we need them.\nMost of the math- and code-heavy parts are optional and clearly marked so you can decide whether to skip them or dive into them. This is how you identify them:\n\n\\(\\small(\\Sigma)\\) All sections or blocks marked with this symbol are math-heavy, and usually include proofs for theorems just discussed in the previous sections.\n\\(\\small[\\lambda]\\) All sections or block marked with this symbol are code-heavy, and most often include a Python implementation of an algorithm previously discussed.\n\nFor emphasis: although you can definitely skip these sections and still enjoy and get a lot out of this book, we strongly encourage you to, at least on a second read, give them a try. We’ve made our best to be as clear and intuitive as possible even in these more advanced sections.",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "index.html#footnotes",
    "href": "index.html#footnotes",
    "title": "The Hitchhiker’s Guide to Graphs",
    "section": "",
    "text": "https://mitpress.mit.edu/9780262367509/introduction-to-algorithms/↩︎",
    "crumbs": [
      "Preface"
    ]
  },
  {
    "objectID": "intro.html",
    "href": "intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "What is a graph\nIntuitively, a graph is just a (finite) collection of elements called vertices (or sometimes nodes), connected via edges. Graph represents an abstract relation space, in which the edges define who’s related to whom, whatever the nature of that relation is.\nMathematically speaking, a graph is an object composed of two sets: one for the vertices, and another for the edges. In fact, edges themselves are sets of two vertices. There is nothing about an edge that matters beyond which are the two vertices it connects. (We will see this isn’t the case for some special classes of graphs, but we’ll only deal with them later.)\nGraphs are abstract objects, which we can visualize by drawing dots for vertices and lines for edges. An example of a simple graph is shown in Figure 1.1.\nFigure 1.1: An example of a graph, with 5 vertices and 7 edges.\nThis graph is composed of 5 vertices (labeled as \\(a, b, c, d, e\\)) and 7 edges. Of course, there is nothing intrinsic to names or the exact location of the vertices in the drawing. Except in very concrete cases – such as when a graph represents a geometrical or geographical object – the layout of a graph is arbitrary, and the same graph can be represented in an infinite number of ways.\nFor instance, Figure 1.2 are two different representations of the very same graph.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#what-is-a-graph",
    "href": "intro.html#what-is-a-graph",
    "title": "1  Introduction",
    "section": "",
    "text": "(a) A flat layout\n\n\n\n\n\n\n\n\n\n\n\n(b) Simulating a “3d” layout\n\n\n\n\n\n\n\nFigure 1.2: Two different representations of the same graph.\n\n\n\n\n\n\n\n\n\n\nIntersecting edges\n\n\n\nThe first representation on Figure 1.2 (a) is drawn without no edges intersecting each other, while Figure 1.2 (b) is not. Can we draw any graph without intersecting edges? This simple question leads us to the beautiful domain of planar graphs. We’ll deal this with much later. Let’s see first what graphs are!\n\n\n\nFormalizing graphs \\(\\small(\\Sigma)\\)\n\n\n\n\n\n\nOptional math sections\n\n\n\nSections with a \\(\\small(\\Sigma)\\) symbol are mathematical definitions or proofs that you can safely ignore if you don’t care about the formalization.\n\n\nWe are ready to use the tools of logic and set theory to formally define the concept of a graph in the language of mathematics.\n\n\n\n\n\n\nDefinition 1.1 (Graphs.) A graph \\(G = (V, E)\\) is a collection of two sets, a set of vertices \\(V\\), and a set of edges \\(E \\subseteq V \\times V\\).\n\n\n\n(We’ll often use the notation \\(V(G)\\) and \\(E(G)\\) for clarity to indicate the source graph \\(G\\). This is useful when juggling with multiple graphs and subgraphs.)\nLet’s unpack this definition. Take a look at Figure 1.1 one more time.\nIn the language of mathematics, this graph is defined by \\(G = (V, E)\\), where the vertices are defined by: \\[V = \\{ a, b, c, d, e \\}\\] and the edges are defined by: \\[E = \\{ (a, e), (a, b), (b, e), (b, c), (b, d), (c, d), (c, e), (d, e) \\}\\]\nTo prevent the unnecessary proliferation of commas and parentheses, we’ll often denote the edge \\((u, v)\\) with \\(uv\\). You can thank us later.\nThe most important characteristic of a vertex is its degree, which basically measures the number of edges between this vertex and any other in the graph. The degree of a vertex \\(v\\) is denoted by \\(d(v)\\). Thus, in our example, \\(d(a) = 2\\), because only the edges \\(ab\\) and \\(ae\\) connect \\(a\\) to another vertex. In contrast, the remaining vertices have degree \\(3\\).\nWe call the set of vertices adjacent to an arbitrary vertex \\(v\\) its neighborhood, denoted by \\(N(v)\\). Thus, the neighborhood of vertex \\(c\\) is the set of vertices \\(\\{ b, d, e \\}\\).\nBy definition, the degree of a vertex is the size of its neighborhood; that is, \\(d(v) = |N(v)|\\).\n\n\nProgramming with graphs \\(\\small[\\lambda]\\)\n\n\n\n\n\n\nOptional coding sections\n\n\n\nSections with a \\(\\small[\\lambda]\\) symbol are related to coding, and you can safely ignore them if you don’t care about the programming part.\n\n\nComputationally speaking, you can think of a graph as an abstract class (or an interface in languages that support that notion) that provides two key operations: listing all nodes, and determining if two nodes are connected.\n\nclass Graph:\n    def nodes(self):\n        raise NotImplemented\n\n    def adjacent(self, x, y) -&gt; bool:\n        raise NotImplemented\n\n    # ... rest of class Graph\n\n\n\n\n\n\n See on Github\n\n\n\n\n\n\n\nYou may be wondering, what if we want to modify the graph? While that makes total sense in some applications, since we want to use this graph abstraction as flexibly as possible. (E.g., as a read only interface to some external resource, such as the graph of your Twitter followers.) We don’t want to constrain ourselves to graphs that are stored in local memory or that can be modified. In any case, specific local implementations of this interface will certainly have methods to add or remove nodes or edges\nJust from the previous definitions, we can already start implementing general methods in graphs, whatever their underlying implementation might be. For example, we can already find the neighborhood and the degree of any given vertex. (Albeit in an extremely slow manner.)\n\n\n# class Graph(...)\n#   ...\n\n    def neighborhood(self, x):\n        for y in self.nodes():\n            if self.adjacent(x, y):\n                yield y\n\n    def degree(self, x) -&gt; int:\n        return len(list(self.neighborhood(x)))\n\n#   ...\n\n\n\n\n\n\n See on Github\n\n\n\n\n\n\n\nThis is admittedly the worst way to compute neighborhoods, but hey, at least it works. And it’s simple! “Simple first, optimized later” is our mantra for now.\nIn cases where we have nothing better, this method will do. We will see shortly that we can easily provide more efficient implementations for specific graph representations.\n\nComputational representations of graphs\nThere are several computational representations of graphs, each with their advantages and limitations.\nThe most straightforward representation is called the adjacency list method, which references all neighbors of a given node in a structure associated to that node, such as an array. In Python, we can store a dictionary of nodes mapping to a set of their adjacent nodes. We use a set to store the adjacency information so we can answer as fast as possible whether two nodes are adjacent.\n\n\nclass AdjGraph(Graph):\n    def __init__(self, *nodes) -&gt; None:\n        super().__init__()\n        self._links = {n: set() for n in nodes}\n\n    def nodes(self):\n        return iter(self._links)\n\n    def adjacent(self, x, y) -&gt; bool:\n        return y in self._links[x]\n\n    def neighborhood(self, x):\n        return iter(self._links[x])\n\n    def degree(self, x) -&gt; int:\n        return len(self._links[x])\n\n    def __len__(self):\n        return len(self._links)\n\n    # ... rest of AdjGraph\n\n\n\n\n\n\n See on Github\n\n\n\n\n\n\n\n\nNote that this implementation allows computing the neighborhood much more directly. It also allows us to dynamically modify the graph by adding vertices and edges.\n\n# class AdjGraph(...)\n#   ...\n\n    def add(self, *nodes):\n        for n in nodes:\n            if n in self._links:\n                return False\n\n            self._links[n] = set()\n\n        return self\n\n    def link(self, x, y):\n        if x == y:\n            raise ValueError(\"Self-links not allowed.\")\n\n        self.add(x)\n        self.add(y)\n        self._links[x].add(y)\n        self._links[y].add(x)\n\n        return self\n\n#   ...\n\n\n\n\n\n\n See on Github\n\n\n\n\n\n\n\nNotice that we are quite flexible in our modification methods, i.e., we don’t complain if a vertex is already added, and we take care of adding new vertices in link if necessary. This makes it way easier to use our implementation to dynamically construct a graph without taking too much hassle verifying that we aren’t adding duplicated things, paying a minimal overhead in performance.\nHere is how we can use this class to generate our first example graph:\nfrom graphs import AdjGraph\n\nexample_graph = (\n    AdjGraph(*\"abcde\")\n    .link(\"a\",\"b\")\n    .link(\"b\",\"c\")\n    .link(\"c\",\"d\")\n    .link(\"d\",\"a\")\n    .link(\"b\",\"e\")\n    .link(\"c\",\"e\")\n    .link(\"b\",\"d\")\n)\n\n\n\n\n\n\nA bit of syntactic sugar\n\n\n\nIf you noticed that return self at the end of the link method, you may be wondering why is that line there. The reason is so can chain successive calls to link to quickly create custom graphs, like in the previous example.\nThis pattern is often called a “fluent interface” and is very common in object-oriented design. It is not strictly necessary, but it’s a nice little syntactic sugar. We can treat ourselves sometimes, right?\nThere are a few other similar methods in AdjGraph that let you quickly build a graph, adding paths, cycles, and other common structures with a single function call, and using method chaining to combine multiple operations in a single line. We will use and explain them when we need them.\n\n\nAnother commonly used representation is the adjacency matrix method, in which we store a separate structure (like a bidimensional array) that explicitely marks which pairs of nodes are related. The main advantage of this representation is that there is a single place to query or modify for adjacency information. The main disadvantages are the extra wasted space, as the adjacency matrix contains a lot of zeros. (Unless we use a sparse matrix. But that’s for another lesson.) Another disadvantage is the added complexity in computing the neighborhood of a given node. This can be solved with using an extra adjacency list, which would nullify the main advantage of the adjacency matrix implementation.\nFor those reasons, we don’t really gain much with adjacency matrices, and thus we will mostly build on the basic AdjGraph implementation throughout the book. It provides a nice balance between flexibility and performance, although is neither the most flexible nor the most performant implementation possible. When we need to, we will devise other more appropriate implementations.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#common-graphs",
    "href": "intro.html#common-graphs",
    "title": "1  Introduction",
    "section": "Common graphs",
    "text": "Common graphs\nThroughout this book we will refer to several common graphs by name. These are graphs that appear over and over in proofs and examples, so it pays to enumerate them briefly here.\n\n\n\n\n\n\n\n\n\n\n\n\n(a) A complete graph with 5 nodes.\n\n\n\n\n\n\n\n\n\n\n\n(b) A cycle graph with 5 nodes.\n\n\n\n\n\n\n\n\n\n\n\n(c) A uniform random graph with 5 nodes and p=0.5.\n\n\n\n\n\n\n\n\n\n\n\n\n\n(d) A path graph with 5 nodes.\n\n\n\n\n\n\n\nFigure 1.3: Examples of common graphs.\n\n\n\n\nThe complete graph \\(K_n\\) is the graph of \\(n\\) vertices and all possible edges. It is, by definition, the densest graph one can have with \\(n\\) vertices (see Figure 1.3 (a)).\nThe path graph \\(P_n\\) is a graph composed of \\(n\\) vertices stitched together in sequence, hence it’s a “path”1 (see Figure 1.3 (d)).\nThe cycle graph \\(C_n\\) is a closed-loop of \\(n\\) vertices. So, just like a path, but the first and last vertices are also adjacent (see Figure 1.3 (b)).\nThe random uniform graph \\(U(n,p)\\) is a graph of \\(n\\) vertices, where each pair of vertices has a probability \\(p \\in [0,1]\\) to exist. It is the simplest random graph one can conceive (see Figure 1.3 (c)).\n\n\n\n\n\n\n\\(\\small[\\lambda]\\) Generating common graphs\n\n\n\nIn graphs.generators you will find methods to generate some of the most common types of graphs, including the ones in this section.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#other-types-of-graphs",
    "href": "intro.html#other-types-of-graphs",
    "title": "1  Introduction",
    "section": "Other types of graphs",
    "text": "Other types of graphs\nSo far, we’ve been talking about undirected and unweighted graphs, called like this because there is no specific direction in each edge, and there is no cost associated to edges.\nThus, the edges \\(ab\\) and \\(ba\\) are exactly the same. It would redundant – and incorrect – to mention them both. And each edge is similarly “important”.\n\n\nHowever, in some applications, we need a bit more information. Two specific types of graphs that pop up all the time are directed and weighted graphs, sometimes both in the same problem.\n\nDirected graphs\n\nIn some applications it is interesting to give a direction to edges, and consider that \\(ab\\) is different from \\(ba\\). For example, in modeling transportation networks, sometimes you have single-direction routes. These are called directed graphs. Although they are essential in practical applications, the fundamental theory and the majority of algorithms are almost identical to undirected graphs, so we will only mention them when there’s some relevant difference. Figure 1.4 shows an example.\n\n\n\n\n\n\n\n\nFigure 1.4: Example of a directed graph.\n\n\n\n\n\n\n\nWeighted graphs\n\nIn planning and routing in particular, edges often represent roads or general connections that involve some cost – either a distance, a price, or any other similar notion of cost. In these cases we use weighted graphs, where each edge has an associated number called a weight, and we can ask questions like what is the optimal path between two nodes (where the sum of the weights of the edges involved is smaller).\nWe will see more weighted graphs very soon.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#final-remarks",
    "href": "intro.html#final-remarks",
    "title": "1  Introduction",
    "section": "Final remarks",
    "text": "Final remarks\nNow that we have laid out the foundational theory, we are ready to move on to specific types of graphs and some concrete problems. In the upcoming chapters we will be looking at specific problems and both learn the necessary theory and design clever algorithms to solve them.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "intro.html#footnotes",
    "href": "intro.html#footnotes",
    "title": "1  Introduction",
    "section": "",
    "text": "We will formalize this concept in the next chapter.↩︎",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "navigating.html",
    "href": "navigating.html",
    "title": "Graphs as maps",
    "section": "",
    "text": "In this part of the book, we interpret graphs as locations (nodes) connected by routes (edges). This is probably the most natural interpretation, and one of the main applications of graph theory for real-life problems.\nOnce we consider that edges are routes between places, we can start asking questions like what is the fastest way to get somewhere or in how many ways can one travel between two places.\n\n\n\n\n\n\n Interested in reading more?\n\n\n\nThis part of the book is still under construction.\nHowever, if you are really interested in it, you can get a sneak peek by supporting this book with an Early Access Pass.\nAn early access pass gives you:\n\nEarly access to all drafts and future versions of the book (including incomplete parts like this one).\nPDF and EPUB formats.\nAccess to a private Discord for discussions about the book.\nAnd a special mention in the Acknowledgment section!\n\nPlease consider getting the Early Access Pass and help us make this project come true.",
    "crumbs": [
      "Navigating",
      "Graphs as maps"
    ]
  },
  {
    "objectID": "planning.html",
    "href": "planning.html",
    "title": "Graphs as plans",
    "section": "",
    "text": "In this part, we interpret a graph in a more abstract nature, such as collections of tasks with prerequisites or people with skills.\nIn such scenarios, we can ask questions about the best way to organize stuff: making schedules, sorting tasks, or assigning people to jobs.\n\n\n\n\n\n\n Interested in reading more?\n\n\n\nThis part of the book is still under construction.\nHowever, if you are really interested in it, you can get a sneak peek by supporting this book with an Early Access Pass.\nAn early access pass gives you:\n\nEarly access to all drafts and future versions of the book (including incomplete parts like this one).\nPDF and EPUB formats.\nAccess to a private Discord for discussions about the book.\nAnd a special mention in the Acknowledgment section!\n\nPlease consider getting the Early Access Pass and help us make this project come true.",
    "crumbs": [
      "Planning",
      "Graphs as plans"
    ]
  },
  {
    "objectID": "socializing.html",
    "href": "socializing.html",
    "title": "Graphs as social networks",
    "section": "",
    "text": "In this part we consider a graph as a social network, were nodes are people, or social entities in general, and the edges represent social interactions –such as a follow in Twitter or a handshake.\nIn this scenario we can interpret structures in the graph as telling something about the social aspects of the world: finding who’s an influential person or determining who’s patient zero in a zombie apocalypse.\n\n\n\n\n\n\n Interested in reading more?\n\n\n\nThis part of the book is still under construction.\nHowever, if you are really interested in it, you can get a sneak peek by supporting this book with an Early Access Pass.\nAn early access pass gives you:\n\nEarly access to all drafts and future versions of the book (including incomplete parts like this one).\nPDF and EPUB formats.\nAccess to a private Discord for discussions about the book.\nAnd a special mention in the Acknowledgment section!\n\nPlease consider getting the Early Access Pass and help us make this project come true.",
    "crumbs": [
      "Socializing",
      "Graphs as social networks"
    ]
  },
  {
    "objectID": "reasoning.html",
    "href": "reasoning.html",
    "title": "Graphs as knowledge bases",
    "section": "",
    "text": "In this part we consider a graph as a knowledge base, connecting concepts (nodes) in a given domain through semantic relations (edges).\nIn this scenario, we can use graphs to answer technical questions in that domain, such as what are the causes of a given disease.\n\n\n\n\n\n\n Interested in reading more?\n\n\n\nThis part of the book is still under construction.\nHowever, if you are really interested in it, you can get a sneak peek by supporting this book with an Early Access Pass.\nAn early access pass gives you:\n\nEarly access to all drafts and future versions of the book (including incomplete parts like this one).\nPDF and EPUB formats.\nAccess to a private Discord for discussions about the book.\nAnd a special mention in the Acknowledgment section!\n\nPlease consider getting the Early Access Pass and help us make this project come true.",
    "crumbs": [
      "Reasoning",
      "Graphs as knowledge bases"
    ]
  },
  {
    "objectID": "drawing.html",
    "href": "drawing.html",
    "title": "Graphs as figures",
    "section": "",
    "text": "In this part, we consider many problems related to visualizing graphs, from how to draw them on a plane in the least messy way (e.g., with the least amount of edge crossings) to drawing maps.\n\n\n\n\n\n\n Interested in reading more?\n\n\n\nThis part of the book is still under construction.\nHowever, if you are really interested in it, you can get a sneak peek by supporting this book with an Early Access Pass.\nAn early access pass gives you:\n\nEarly access to all drafts and future versions of the book (including incomplete parts like this one).\nPDF and EPUB formats.\nAccess to a private Discord for discussions about the book.\nAnd a special mention in the Acknowledgment section!\n\nPlease consider getting the Early Access Pass and help us make this project come true.",
    "crumbs": [
      "Drawing",
      "Graphs as figures"
    ]
  },
  {
    "objectID": "appendix-math.html",
    "href": "appendix-math.html",
    "title": "Appendix A — A Primer on Logic and Discrete Math",
    "section": "",
    "text": "Important\n\n\n\nThis is a very superficial introduction to some of the most important ideas in logic and discrete math that support the proof techniques we’ll use throughout the book. This appendix does not pretend to be a full introduction to either branch of maths, but a quick refresher for those who are already at least somewhat familiar with these notions.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>A</span>  <span class='chapter-title'>A Primer on Logic and Discrete Math</span>"
    ]
  },
  {
    "objectID": "appendix-python.html",
    "href": "appendix-python.html",
    "title": "Appendix B — A Primer on Python",
    "section": "",
    "text": "Important\n\n\n\nThis is a very shallow introduction to the Python programming language, focusing only on the basic features of the language that we use throughout the book. This appendix does not pretend to be a full introduction to neither Python nor programming in general.\n\n\nPython is a multi-paradigm, dynamically-typed programming language with strong influences from both the object-oriented and the functional paradigms. As such, Python features all the basic notions in most traditional OOP and functional languages, including classes, multiple inheritance, single-dispatch polymorphism, top-level and nested functions, lambdas, iterators, and optional support for nominal typing and some basic structural typing.\nIf all or some of the above sounds alien to you, just believe us: if you’ve tried any of the top 20 most popular programming languages before, learning Python will be a breeze.\nThat being said, this is not intended to be a complete introduction to Python. We assume you already code in some other language and are familiar with the basic notions of variable declarations, loops, function declaration and invocation, and some object-oriented programming. As such, this appendix focuses only on the syntactic and the most important semantic aspects of the Python programming language that make it different from other well-known languages such as C++ or Java.",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>B</span>  <span class='chapter-title'>A Primer on Python</span>"
    ]
  },
  {
    "objectID": "appendix-core.html",
    "href": "appendix-core.html",
    "title": "Appendix C — The hitchhiker-graphs Python Package",
    "section": "",
    "text": "Lots of code ahead\n\n\n\nThis whole appendix is dedicated to the hitchhiker-graphs Python package. You are free to skip it if you don’t care about the coding part of the book.\n\n\nThe hitchhikers-graph package contains the main code used in this book, including class definitions for all the graph types and functions for all search algorithms. It does not contain scripting code that we used to illustrate how the algorithms run.\nTo install the package, just type:\n$ pip install hitchhiker-graphs\nOnce installation is ready, you can import the AdjGraph class and start doing fun stuff.\n\nfrom graphs import AdjGraph\n\ng = AdjGraph().cycle(1,2,3,4,5).link(2,4).link(3,5)\n\nWhich generates the following graph:\n\n\n\n\n\nA simple graph",
    "crumbs": [
      "Appendices",
      "<span class='chapter-number'>C</span>  <span class='chapter-title'>The `hitchhiker-graphs` Python Package</span>"
    ]
  }
]